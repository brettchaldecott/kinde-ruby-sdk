=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class SubscribersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Subscriber
    # Create subscriber.  <div>   <code>create:subscribers</code> </div> 
    # @param first_name [String] Subscriber&#39;s first name.
    # @param last_name [String] Subscriber&#39;s last name.
    # @param email [String] The email address of the subscriber.
    # @param [Hash] opts the optional parameters
    # @return [CreateSubscriberSuccessResponse]
    def create_subscriber(first_name, last_name, email, opts = {})
      data, _status_code, _headers = create_subscriber_with_http_info(first_name, last_name, email, opts)
      data
    end

    # Create Subscriber
    # Create subscriber.  &lt;div&gt;   &lt;code&gt;create:subscribers&lt;/code&gt; &lt;/div&gt; 
    # @param first_name [String] Subscriber&#39;s first name.
    # @param last_name [String] Subscriber&#39;s last name.
    # @param email [String] The email address of the subscriber.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSubscriberSuccessResponse, Integer, Hash)>] CreateSubscriberSuccessResponse data, response status code and response headers
    def create_subscriber_with_http_info(first_name, last_name, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.create_subscriber ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling SubscribersApi.create_subscriber"
      end
      # resource path
      local_var_path = '/api/v1/subscribers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'first_name'] = first_name
      query_params[:'last_name'] = last_name
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSubscriberSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.create_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#create_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Subscriber
    # Retrieve a subscriber record.  <div>   <code>read:subscribers</code> </div> 
    # @param subscriber_id [String] The subscriber&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetSubscriberResponse]
    def get_subscriber(subscriber_id, opts = {})
      data, _status_code, _headers = get_subscriber_with_http_info(subscriber_id, opts)
      data
    end

    # Get Subscriber
    # Retrieve a subscriber record.  &lt;div&gt;   &lt;code&gt;read:subscribers&lt;/code&gt; &lt;/div&gt; 
    # @param subscriber_id [String] The subscriber&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSubscriberResponse, Integer, Hash)>] GetSubscriberResponse data, response status code and response headers
    def get_subscriber_with_http_info(subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.get_subscriber ...'
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.get_subscriber"
      end
      # resource path
      local_var_path = '/api/v1/subscribers/{subscriber_id}'.sub('{' + 'subscriber_id' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSubscriberResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.get_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#get_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subscribers
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.  <div>   <code>read:subscribers</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetSubscribersResponse]
    def get_subscribers(opts = {})
      data, _status_code, _headers = get_subscribers_with_http_info(opts)
      data
    end

    # List Subscribers
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter.  &lt;div&gt;   &lt;code&gt;read:subscribers&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetSubscribersResponse, Integer, Hash)>] GetSubscribersResponse data, response status code and response headers
    def get_subscribers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.get_subscribers ...'
      end
      allowable_values = ["name_asc", "name_desc", "email_asc", "email_desc"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/subscribers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_token'] = opts[:'next_token'] if !opts[:'next_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSubscribersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.get_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#get_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
