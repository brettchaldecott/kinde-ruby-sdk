=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class CallbacksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add logout redirect URLs
    # Add additional logout redirect URLs.  <div>   <code>create:application_logout_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param replace_logout_redirect_urls_request [ReplaceLogoutRedirectURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def add_logout_redirect_urls(app_id, replace_logout_redirect_urls_request, opts = {})
      data, _status_code, _headers = add_logout_redirect_urls_with_http_info(app_id, replace_logout_redirect_urls_request, opts)
      data
    end

    # Add logout redirect URLs
    # Add additional logout redirect URLs.  &lt;div&gt;   &lt;code&gt;create:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param replace_logout_redirect_urls_request [ReplaceLogoutRedirectURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def add_logout_redirect_urls_with_http_info(app_id, replace_logout_redirect_urls_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.add_logout_redirect_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.add_logout_redirect_urls"
      end
      # verify the required parameter 'replace_logout_redirect_urls_request' is set
      if @api_client.config.client_side_validation && replace_logout_redirect_urls_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_logout_redirect_urls_request' when calling CallbacksApi.add_logout_redirect_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_logout_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_logout_redirect_urls_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.add_logout_redirect_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#add_logout_redirect_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Redirect Callback URLs
    # Add additional redirect callback URLs.  <div>   <code>create:applications_redirect_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param replace_redirect_callback_urls_request [ReplaceRedirectCallbackURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def add_redirect_callback_urls(app_id, replace_redirect_callback_urls_request, opts = {})
      data, _status_code, _headers = add_redirect_callback_urls_with_http_info(app_id, replace_redirect_callback_urls_request, opts)
      data
    end

    # Add Redirect Callback URLs
    # Add additional redirect callback URLs.  &lt;div&gt;   &lt;code&gt;create:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param replace_redirect_callback_urls_request [ReplaceRedirectCallbackURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def add_redirect_callback_urls_with_http_info(app_id, replace_redirect_callback_urls_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.add_redirect_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.add_redirect_callback_urls"
      end
      # verify the required parameter 'replace_redirect_callback_urls_request' is set
      if @api_client.config.client_side_validation && replace_redirect_callback_urls_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_redirect_callback_urls_request' when calling CallbacksApi.add_redirect_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_redirect_callback_urls_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.add_redirect_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#add_redirect_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Callback URLs
    # Delete callback URLs.  <div>   <code>delete:applications_redirect_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param urls [String] Urls to delete, comma separated and url encoded.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_callback_urls(app_id, urls, opts = {})
      data, _status_code, _headers = delete_callback_urls_with_http_info(app_id, urls, opts)
      data
    end

    # Delete Callback URLs
    # Delete callback URLs.  &lt;div&gt;   &lt;code&gt;delete:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param urls [String] Urls to delete, comma separated and url encoded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_callback_urls_with_http_info(app_id, urls, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.delete_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.delete_callback_urls"
      end
      # verify the required parameter 'urls' is set
      if @api_client.config.client_side_validation && urls.nil?
        fail ArgumentError, "Missing the required parameter 'urls' when calling CallbacksApi.delete_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'urls'] = urls

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.delete_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#delete_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Logout URLs
    # Delete logout URLs.  <div>   <code>delete:application_logout_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param urls [String] Urls to delete, comma separated and url encoded.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_logout_urls(app_id, urls, opts = {})
      data, _status_code, _headers = delete_logout_urls_with_http_info(app_id, urls, opts)
      data
    end

    # Delete Logout URLs
    # Delete logout URLs.  &lt;div&gt;   &lt;code&gt;delete:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param urls [String] Urls to delete, comma separated and url encoded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_logout_urls_with_http_info(app_id, urls, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.delete_logout_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.delete_logout_urls"
      end
      # verify the required parameter 'urls' is set
      if @api_client.config.client_side_validation && urls.nil?
        fail ArgumentError, "Missing the required parameter 'urls' when calling CallbacksApi.delete_logout_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_logout_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'urls'] = urls

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.delete_logout_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#delete_logout_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Callback URLs
    # Returns an application's redirect callback URLs.  <div>   <code>read:applications_redirect_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [RedirectCallbackUrls]
    def get_callback_urls(app_id, opts = {})
      data, _status_code, _headers = get_callback_urls_with_http_info(app_id, opts)
      data
    end

    # List Callback URLs
    # Returns an application&#39;s redirect callback URLs.  &lt;div&gt;   &lt;code&gt;read:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RedirectCallbackUrls, Integer, Hash)>] RedirectCallbackUrls data, response status code and response headers
    def get_callback_urls_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.get_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.get_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RedirectCallbackUrls'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.get_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#get_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List logout URLs
    # Returns an application's logout redirect URLs.  <div>   <code>read:application_logout_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [LogoutRedirectUrls]
    def get_logout_urls(app_id, opts = {})
      data, _status_code, _headers = get_logout_urls_with_http_info(app_id, opts)
      data
    end

    # List logout URLs
    # Returns an application&#39;s logout redirect URLs.  &lt;div&gt;   &lt;code&gt;read:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogoutRedirectUrls, Integer, Hash)>] LogoutRedirectUrls data, response status code and response headers
    def get_logout_urls_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.get_logout_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.get_logout_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_logout_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogoutRedirectUrls'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.get_logout_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#get_logout_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace logout redirect URls
    # Replace all logout redirect URLs.  <div>   <code>update:application_logout_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param replace_logout_redirect_urls_request [ReplaceLogoutRedirectURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace_logout_redirect_urls(app_id, replace_logout_redirect_urls_request, opts = {})
      data, _status_code, _headers = replace_logout_redirect_urls_with_http_info(app_id, replace_logout_redirect_urls_request, opts)
      data
    end

    # Replace logout redirect URls
    # Replace all logout redirect URLs.  &lt;div&gt;   &lt;code&gt;update:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param replace_logout_redirect_urls_request [ReplaceLogoutRedirectURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_logout_redirect_urls_with_http_info(app_id, replace_logout_redirect_urls_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.replace_logout_redirect_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.replace_logout_redirect_urls"
      end
      # verify the required parameter 'replace_logout_redirect_urls_request' is set
      if @api_client.config.client_side_validation && replace_logout_redirect_urls_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_logout_redirect_urls_request' when calling CallbacksApi.replace_logout_redirect_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_logout_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_logout_redirect_urls_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.replace_logout_redirect_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#replace_logout_redirect_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Redirect Callback URLs
    # Replace all redirect callback URLs.  <div>   <code>update:applications_redirect_uris</code> </div> 
    # @param app_id [String] The identifier for the application.
    # @param replace_redirect_callback_urls_request [ReplaceRedirectCallbackURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace_redirect_callback_urls(app_id, replace_redirect_callback_urls_request, opts = {})
      data, _status_code, _headers = replace_redirect_callback_urls_with_http_info(app_id, replace_redirect_callback_urls_request, opts)
      data
    end

    # Replace Redirect Callback URLs
    # Replace all redirect callback URLs.  &lt;div&gt;   &lt;code&gt;update:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
    # @param app_id [String] The identifier for the application.
    # @param replace_redirect_callback_urls_request [ReplaceRedirectCallbackURLsRequest] Callback details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_redirect_callback_urls_with_http_info(app_id, replace_redirect_callback_urls_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallbacksApi.replace_redirect_callback_urls ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling CallbacksApi.replace_redirect_callback_urls"
      end
      # verify the required parameter 'replace_redirect_callback_urls_request' is set
      if @api_client.config.client_side_validation && replace_redirect_callback_urls_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_redirect_callback_urls_request' when calling CallbacksApi.replace_redirect_callback_urls"
      end
      # resource path
      local_var_path = '/api/v1/applications/{app_id}/auth_redirect_urls'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_redirect_callback_urls_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"CallbacksApi.replace_redirect_callback_urls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallbacksApi#replace_redirect_callback_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
