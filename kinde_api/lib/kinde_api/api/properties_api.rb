=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class PropertiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Property
    # Create property.  <div>   <code>create:properties</code> </div> 
    # @param create_property_request [CreatePropertyRequest] Property details.
    # @param [Hash] opts the optional parameters
    # @return [CreatePropertyResponse]
    def create_property(create_property_request, opts = {})
      data, _status_code, _headers = create_property_with_http_info(create_property_request, opts)
      data
    end

    # Create Property
    # Create property.  &lt;div&gt;   &lt;code&gt;create:properties&lt;/code&gt; &lt;/div&gt; 
    # @param create_property_request [CreatePropertyRequest] Property details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePropertyResponse, Integer, Hash)>] CreatePropertyResponse data, response status code and response headers
    def create_property_with_http_info(create_property_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.create_property ...'
      end
      # verify the required parameter 'create_property_request' is set
      if @api_client.config.client_side_validation && create_property_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_property_request' when calling PropertiesApi.create_property"
      end
      # resource path
      local_var_path = '/api/v1/properties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_property_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePropertyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertiesApi.create_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#create_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Property
    # Delete property.  <div>   <code>delete:properties</code> </div> 
    # @param property_id [String] The unique identifier for the property.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_property(property_id, opts = {})
      data, _status_code, _headers = delete_property_with_http_info(property_id, opts)
      data
    end

    # Delete Property
    # Delete property.  &lt;div&gt;   &lt;code&gt;delete:properties&lt;/code&gt; &lt;/div&gt; 
    # @param property_id [String] The unique identifier for the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_property_with_http_info(property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.delete_property ...'
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling PropertiesApi.delete_property"
      end
      # resource path
      local_var_path = '/api/v1/properties/{property_id}'.sub('{' + 'property_id' + '}', CGI.escape(property_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertiesApi.delete_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#delete_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List properties
    # Returns a list of properties  <div>   <code>read:properties</code> </div> 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the property to start after.
    # @option opts [String] :ending_before The ID of the property to end before.
    # @option opts [String] :context Filter results by user,  organization or application context
    # @return [GetPropertiesResponse]
    def get_properties(opts = {})
      data, _status_code, _headers = get_properties_with_http_info(opts)
      data
    end

    # List properties
    # Returns a list of properties  &lt;div&gt;   &lt;code&gt;read:properties&lt;/code&gt; &lt;/div&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the property to start after.
    # @option opts [String] :ending_before The ID of the property to end before.
    # @option opts [String] :context Filter results by user,  organization or application context
    # @return [Array<(GetPropertiesResponse, Integer, Hash)>] GetPropertiesResponse data, response status code and response headers
    def get_properties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.get_properties ...'
      end
      allowable_values = ["usr", "org", "app"]
      if @api_client.config.client_side_validation && opts[:'context'] && !allowable_values.include?(opts[:'context'])
        fail ArgumentError, "invalid value for \"context\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/properties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPropertiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertiesApi.get_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#get_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get properties
    # Returns all properties for the user 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the property to start after.
    # @return [GetUserPropertiesResponse]
    def get_user_properties(opts = {})
      data, _status_code, _headers = get_user_properties_with_http_info(opts)
      data
    end

    # Get properties
    # Returns all properties for the user 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :starting_after The ID of the property to start after.
    # @return [Array<(GetUserPropertiesResponse, Integer, Hash)>] GetUserPropertiesResponse data, response status code and response headers
    def get_user_properties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.get_user_properties ...'
      end
      # resource path
      local_var_path = '/account_api/v1/properties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserPropertiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertiesApi.get_user_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#get_user_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Property
    # Update property.  <div>   <code>update:properties</code> </div> 
    # @param property_id [String] The unique identifier for the property.
    # @param update_property_request [UpdatePropertyRequest] The fields of the property to update.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_property(property_id, update_property_request, opts = {})
      data, _status_code, _headers = update_property_with_http_info(property_id, update_property_request, opts)
      data
    end

    # Update Property
    # Update property.  &lt;div&gt;   &lt;code&gt;update:properties&lt;/code&gt; &lt;/div&gt; 
    # @param property_id [String] The unique identifier for the property.
    # @param update_property_request [UpdatePropertyRequest] The fields of the property to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_property_with_http_info(property_id, update_property_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertiesApi.update_property ...'
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling PropertiesApi.update_property"
      end
      # verify the required parameter 'update_property_request' is set
      if @api_client.config.client_side_validation && update_property_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_property_request' when calling PropertiesApi.update_property"
      end
      # resource path
      local_var_path = '/api/v1/properties/{property_id}'.sub('{' + 'property_id' + '}', CGI.escape(property_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_property_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"PropertiesApi.update_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertiesApi#update_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
