=begin
#Kinde Management API

# Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

The version of the OpenAPI document: 1
Contact: support@kinde.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module KindeApi
  class SelfServePortalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get self-serve portal link
    # Returns a link to the self-serve portal for the authenticated user. The user can use this link to manage their account, update their profile, and view their entitlements. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subnav The area of the portal you want the user to land on
    # @option opts [String] :return_url The URL to redirect the user to after they have completed their actions in the portal.
    # @return [GetPortalLink]
    def get_portal_link(opts = {})
      data, _status_code, _headers = get_portal_link_with_http_info(opts)
      data
    end

    # Get self-serve portal link
    # Returns a link to the self-serve portal for the authenticated user. The user can use this link to manage their account, update their profile, and view their entitlements. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subnav The area of the portal you want the user to land on
    # @option opts [String] :return_url The URL to redirect the user to after they have completed their actions in the portal.
    # @return [Array<(GetPortalLink, Integer, Hash)>] GetPortalLink data, response status code and response headers
    def get_portal_link_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SelfServePortalApi.get_portal_link ...'
      end
      allowable_values = ["profile", "organization_details", "organization_payment_details", "organization_plan_selection", "payment_details", "plan_details", "plan_selection"]
      if @api_client.config.client_side_validation && opts[:'subnav'] && !allowable_values.include?(opts[:'subnav'])
        fail ArgumentError, "invalid value for \"subnav\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/account_api/v1/get_portal_link'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subnav'] = opts[:'subnav'] if !opts[:'subnav'].nil?
      query_params[:'return_url'] = opts[:'return_url'] if !opts[:'return_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPortalLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        :operation => :"SelfServePortalApi.get_portal_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SelfServePortalApi#get_portal_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
